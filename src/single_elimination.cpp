#include <algorithm>
#include <random>
#include "single_elimination.h"
#include "tournament.h"
#include "localizer.h"
#include "match.h"



using namespace Judoboard;



SingleElimination::SingleElimination(const ITournament* Tournament, Weight MinWeight, Weight MaxWeight)
	: Weightclass(Tournament, MinWeight, MaxWeight)
{
}



SingleElimination::SingleElimination(const YAML::Node& Yaml, ITournament* Tournament) : Weightclass(Yaml, Tournament)
{
}



void SingleElimination::operator >> (YAML::Emitter& Yaml) const
{
	Weightclass::operator >>(Yaml);
}



void SingleElimination::ToString(YAML::Emitter& Yaml) const
{
	Weightclass::ToString(Yaml);
}



std::string SingleElimination::GetHTMLForm()
{
	auto ret = Weightclass::GetHTMLForm();

	ret += R"(
<div>
	<label style="width:150px;float:left;margin-top:5px;" id="label_mf3">Match for 3rd place</label>
		<input type="checkbox" id="mf3" class="switch-input">
		<label style="padding-top:0px;padding-bottom:0px;margin-top:5px;margin-bottom:20px;" class="switch-label" for="mf3">
		<span class="toggle-on" id="mf3_enabled"></span><span class="toggle-off" id="mf3_disabled"></span>
	</label>
</div>

<div>
	<label style="width:150px;float:left;margin-top:5px;" id="label_mf5">Match for 5th place</label>
		<input type="checkbox" id="mf5" class="switch-input">
		<label style="padding-top:0px;padding-bottom:0px;margin-top:5px;margin-bottom:20px;" class="switch-label" for="mf5">
		<span class="toggle-on" id="mf5_enabled"></span><span class="toggle-off" id="mf5_disabled"></span>
	</label>
</div>
)";

	return ret;
}



void SingleElimination::GenerateSchedule()
{
	for (auto it = m_Schedule.begin(); it != m_Schedule.end();)
	{
		if ((*it)->IsAutoGenerated())
			it = m_Schedule.erase(it);
		else
			++it;
	}

	if (GetParticipants().size() <= 3)
		m_RecommendedNumMatches_Before_Break = 1;
	else
		m_RecommendedNumMatches_Before_Break = 2;

	const auto rounds = GetNumberOfRounds();
	
	//Round 1
	std::vector<Match*> lastRound;
	std::vector<Match*> nextRound;

	for (int i = 0; i < GetParticipants().size(); i += 2)
	{
		auto match = AddAutoMatch(i, i+1);
		nextRound.emplace_back(match);
	}

	//Additional rounds
	for (int round = 1; round < rounds; ++round)
	{
		lastRound = std::move(nextRound);
		nextRound.clear();

		for (size_t i = 0; i < lastRound.size(); i += 2)
		{
			if (i+1 >= lastRound.size())
				break;

			auto match_winner1 = lastRound[i];
			auto match_winner2 = lastRound[i+1];

			auto new_match = AddMatchForWinners(match_winner1, match_winner2);
			nextRound.emplace_back(new_match);
		}
	}


	
	//Add additional matches for best of three
	if (IsBestOfThree())
	{
		auto length = m_Schedule.size();
		for (size_t i = 0; i < length; ++i)
		{
			auto match1 = m_Schedule[i];
			auto indices = GetIndicesOfMatch(match1);

			auto match2 = AddAutoMatch(indices.second, indices.first);
			auto match3 = AddAutoMatch(indices.first,  indices.second);
			if (match3)
				match3->SetBestOfThree(match1, match2);
		}
	}
}



std::vector<MatchTable::Result> SingleElimination::CalculateResults() const
{
	std::vector<Result> ret(GetParticipants().size());

	for (size_t i = 0; i < GetParticipants().size(); i++)
	{
		auto fighter = GetParticipant(i);
		ret[i].Set(fighter, this);		
	}

	for (const Match* match : m_Schedule)
	{
		if (!match->HasConcluded())
			continue;

		const auto& result = match->GetMatchResult();

		auto i = GetIndexOfParticipant(match->GetWinner());
		auto j = GetIndexOfParticipant(match->GetLoser());

		ret[i].Wins++;
		ret[i].Score += (uint32_t)result.m_Score;

		ret[i].Time += result.m_Time;
		ret[j].Time += result.m_Time;
	}

	std::sort(ret.begin(), ret.end());

	return ret;
}



const std::string SingleElimination::ToHTML() const
{
	std::string ret;

	ret += "<a href=\"#matchtable_add.html?id=" + (std::string)GetUUID() + "\">" + GetDescription() + "</a>";

	ret += " / " + Localizer::Translate("Mat") + " " + std::to_string(GetMatID()) + " / " + GetRuleSet().GetName() + "<br/>";

	ret += "<table width='50%' border='1' rules='all'>";

	//auto results = CalculateResults();

	const auto N = GetParticipants().size();
	const auto rounds = GetNumberOfRounds();

	auto renderMatch = [this, N](int roundIndex, int matchOfRound) -> std::string {
		int matchIndex = 0;
		for (int i = 1; i <= roundIndex; ++i)
			matchIndex += (int)(N / pow(2.0, i));

		matchIndex += matchOfRound;

		if (matchIndex >= GetSchedule().size())
			return "";

		auto match = GetSchedule()[matchIndex];

		std::string ret;

		ret += "<td><a href='#edit_match.html?id=" + (std::string)match->GetUUID() + "'>";
		
		//Output name of fighters
		if (match->GetFighter(Fighter::White))
			ret += match->GetFighter(Fighter::White)->GetName();
		else
			ret += "???";

		ret += " vs. ";

		if (match->GetFighter(Fighter::Blue))
			ret += match->GetFighter(Fighter::Blue)->GetName();
		else
			ret += "???";

		//Output result
		if (match->IsRunning())
			ret += "<br/>" + Localizer::Translate("In Progress");
		else if (match->HasConcluded())
		{
			const auto& result = match->GetMatchResult();
			if (result.m_Winner == Winner::White)
				ret += "<br/>"   + std::to_string((int)result.m_Score) + ":0";
			else
				ret += "<br/>0:" + std::to_string((int)result.m_Score);

			ret += " (" + Timer::TimestampToString(result.m_Time) + ")";
		}

		ret += "</a></td>";

		return ret;
	};


	ret += "<tr style='height: 5mm; text-align: center'>";
	for (int round = 0; round < rounds; ++round)
		ret += "<th>" + Localizer::Translate("Round") + " " + std::to_string(round + 1) + "</th>";
	ret += "</tr>";

	for (int y = 0; y < N; ++y)
	{
		ret += "<tr style='height: 5mm; text-align: center'>";

		for (int round = 0; round < rounds; ++round)
		{
			if ( (y + (int)std::pow(2, round) + 1) % (int)std::pow(2, round+1) != 0)
			{
				ret += "<td></td>";
				continue;
			}

			const int matchOfRound = y / (int)std::pow(2, round+1);
			ret += renderMatch(round, matchOfRound);
		}

		ret += "</tr>";
	}
	

	return ret;
}