#include <algorithm>
#include <random>
#include "pool.h"
#include "tournament.h"
#include "round_robin.h"
#include "localizer.h"
#include "match.h"



using namespace Judoboard;



Pool::Pool(Weight MinWeight, Weight MaxWeight, Gender Gender, const ITournament* Tournament)
	: Pool(new Weightclass(MinWeight, MaxWeight, Gender, Tournament), Tournament)
{
}



Pool::Pool(const YAML::Node& Yaml, ITournament* Tournament)
	: MatchTable(Yaml, Tournament), m_Finals(nullptr, Tournament)
{
	if (Yaml["pool_count"])
		m_PoolCount = Yaml["pool_count"].as<bool>();

	if (Yaml["third_place_match"])
		IsThirdPlaceMatch(Yaml["third_place_match"].as<bool>());
	if (Yaml["fifth_place_match"])
		IsFifthPlaceMatch(Yaml["fifth_place_match"].as<bool>());
}



void Pool::operator >> (YAML::Emitter& Yaml) const
{
	MatchTable::operator >>(Yaml);

	if (IsThirdPlaceMatch())
		Yaml << YAML::Key << "third_place_match" << YAML::Value << IsThirdPlaceMatch();
	if (IsFifthPlaceMatch())
		Yaml << YAML::Key << "fifth_place_match" << YAML::Value << IsFifthPlaceMatch();
}



void Pool::ToString(YAML::Emitter& Yaml) const
{
	MatchTable::ToString(Yaml);

	Yaml << YAML::Key << "third_place" << YAML::Value << IsThirdPlaceMatch();
	Yaml << YAML::Key << "fifth_place" << YAML::Value << IsFifthPlaceMatch();
}



std::string Pool::GetHTMLForm()
{
	std::string ret = R"(
<div>
  <label style="width:150px;float:left;margin-top:5px;" id="label_pool">#Pools</label>
  <select style="margin-bottom:20px;" id="pool_count">
    <option selected value="0" id="auto">Auto</option>
    <option value="2">2</option>
	<option value="4">4</option>
	<option value="8">8</option>
  </select>
</div>

<div>
	<label style="width:150px;float:left;margin-top:5px;" id="label_mf3">Match for 3rd place</label>
		<input type="checkbox" id="mf3" class="switch-input">
		<label style="padding-top:0px;padding-bottom:0px;margin-top:5px;margin-bottom:20px;" class="switch-label" for="mf3">
		<span class="toggle-on" id="mf3_enabled"></span><span class="toggle-off" id="mf3_disabled"></span>
	</label>
</div>

<div>
	<label style="width:150px;float:left;margin-top:5px;" id="label_mf5">Match for 5th place</label>
		<input type="checkbox" id="mf5" class="switch-input">
		<label style="padding-top:0px;padding-bottom:0px;margin-top:5px;margin-bottom:20px;" class="switch-label" for="mf5">
		<span class="toggle-on" id="mf5_enabled"></span><span class="toggle-off" id="mf5_disabled"></span>
	</label>
</div>
)";

	return ret;
}



void Pool::GenerateSchedule()
{
	for (auto it = m_Schedule.begin(); it != m_Schedule.end();)
	{
		if ((*it)->IsAutoGenerated())
			it = m_Schedule.erase(it);
		else
			++it;
	}

	m_RecommendedNumMatches_Before_Break = 4;//TODO

	if (!GetFilter() || GetParticipants().size() <= 1)
		return;

	const auto max_start_pos = std::floor(GetParticipants().size() / m_PoolCount) * m_PoolCount;

	for (auto pool : m_Pools)
		delete pool;

	m_Pools.clear();
	m_Pools.resize(m_PoolCount);

	for (int i = 0; i < m_PoolCount; ++i)
		m_Pools[i] = new RoundRobin(nullptr, GetTournament());//TODO!!

	//Distribute participants to pools
	for (int pos = 0; pos < max_start_pos; ++pos)
	{
		auto judoka = GetJudokaByStartPosition(pos);

		if (!judoka)
			continue;

		int pool = pos % m_PoolCount;

		m_Pools[pool]->AddParticipant(judoka, true);
	}
}



const std::string Pool::ToHTML() const
{
	std::string ret;

	ret += "<a href=\"#matchtable_add.html?id=" + (std::string)GetUUID() + "\">" + GetDescription() + "</a>";

	ret += " / " + Localizer::Translate("Mat") + " " + std::to_string(GetMatID()) + " / " + GetRuleSet().GetName() + "<br/>";

	ret += "<table border='1' rules='all'>";

	//TODO

	ret += "</table>";

	ret += ResultsToHTML();	

	return ret;
}